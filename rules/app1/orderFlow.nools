
rule sumbmission_check_1 {
	when {
		i : item checkItemAccSplitsForDepAndCC(i);
	}
	then{
		console.log('Item \"%s\" account splits have same cost center & department, executing GEP consolidator.', i.Name);
	}
}

rule sumbmission_check_2 {
	when {
		i : item checkItemAccSplitsForEmptyProjectCostCenterAndLegalEntity(i, ['CC1', 'CC100', 'CC10000'], ['A', 'B', 'C']);
	}
	then{
	}
}



function checkItemAccSplitsForDepAndCC(item){
	var cnt = item.AccountingSplits.length;
	if(cnt > 1){
		var first = {
			cc : item.AccountingSplits[0].CostCenter,
			dep : item.AccountingSplits[0].Department
		};
		for(var i = 1 ; i < cnt; i++){
			if(first.cc !== item.AccountingSplits[i].CostCenter  ||  first.dep !== item.AccountingSplits[i].Department)
				return false;
		}
		return true;
	}
	return false;
}

function checkItemAccSplitsForEmptyProjectCostCenterAndLegalEntity(item, arrCC, arrLE){
	var arrAccSplitIds = [];
	item.AccountingSplits.forEach(function(as){
		if(as.Project.length === 0 && arrCC.indexOf(as.CostCenter) !== -1 && arrLE.indexOf(as.LegalEntity[0]) !== -1)
			arrAccSplitIds.push(as.Id);
	});
	if(arrAccSplitIds.length > 0)
		console.log('Empty project, cost center and legal entity validation error or for item Id : %s and account split Ids : %s', item.Id, arrAccSplitIds.join(','));
	
	return false;
}